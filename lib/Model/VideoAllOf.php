<?php
/**
 * VideoAllOf
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.45
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VideoAllOf Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class VideoAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Video_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'duration_ms' => 'int',
        'non_public_metrics' => '\OpenAPI\Client\Model\VideoAllOfNonPublicMetrics',
        'organic_metrics' => '\OpenAPI\Client\Model\VideoAllOfOrganicMetrics',
        'preview_image_url' => 'string',
        'promoted_metrics' => '\OpenAPI\Client\Model\VideoAllOfPromotedMetrics',
        'public_metrics' => '\OpenAPI\Client\Model\VideoAllOfPublicMetrics',
        'variants' => '\OpenAPI\Client\Model\Variant[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'duration_ms' => null,
        'non_public_metrics' => null,
        'organic_metrics' => null,
        'preview_image_url' => 'uri',
        'promoted_metrics' => null,
        'public_metrics' => null,
        'variants' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'duration_ms' => 'duration_ms',
        'non_public_metrics' => 'non_public_metrics',
        'organic_metrics' => 'organic_metrics',
        'preview_image_url' => 'preview_image_url',
        'promoted_metrics' => 'promoted_metrics',
        'public_metrics' => 'public_metrics',
        'variants' => 'variants'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'duration_ms' => 'setDurationMs',
        'non_public_metrics' => 'setNonPublicMetrics',
        'organic_metrics' => 'setOrganicMetrics',
        'preview_image_url' => 'setPreviewImageUrl',
        'promoted_metrics' => 'setPromotedMetrics',
        'public_metrics' => 'setPublicMetrics',
        'variants' => 'setVariants'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'duration_ms' => 'getDurationMs',
        'non_public_metrics' => 'getNonPublicMetrics',
        'organic_metrics' => 'getOrganicMetrics',
        'preview_image_url' => 'getPreviewImageUrl',
        'promoted_metrics' => 'getPromotedMetrics',
        'public_metrics' => 'getPublicMetrics',
        'variants' => 'getVariants'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['duration_ms'] = $data['duration_ms'] ?? null;
        $this->container['non_public_metrics'] = $data['non_public_metrics'] ?? null;
        $this->container['organic_metrics'] = $data['organic_metrics'] ?? null;
        $this->container['preview_image_url'] = $data['preview_image_url'] ?? null;
        $this->container['promoted_metrics'] = $data['promoted_metrics'] ?? null;
        $this->container['public_metrics'] = $data['public_metrics'] ?? null;
        $this->container['variants'] = $data['variants'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets duration_ms
     *
     * @return int|null
     */
    public function getDurationMs()
    {
        return $this->container['duration_ms'];
    }

    /**
     * Sets duration_ms
     *
     * @param int|null $duration_ms duration_ms
     *
     * @return self
     */
    public function setDurationMs($duration_ms)
    {
        $this->container['duration_ms'] = $duration_ms;

        return $this;
    }

    /**
     * Gets non_public_metrics
     *
     * @return \OpenAPI\Client\Model\VideoAllOfNonPublicMetrics|null
     */
    public function getNonPublicMetrics()
    {
        return $this->container['non_public_metrics'];
    }

    /**
     * Sets non_public_metrics
     *
     * @param \OpenAPI\Client\Model\VideoAllOfNonPublicMetrics|null $non_public_metrics non_public_metrics
     *
     * @return self
     */
    public function setNonPublicMetrics($non_public_metrics)
    {
        $this->container['non_public_metrics'] = $non_public_metrics;

        return $this;
    }

    /**
     * Gets organic_metrics
     *
     * @return \OpenAPI\Client\Model\VideoAllOfOrganicMetrics|null
     */
    public function getOrganicMetrics()
    {
        return $this->container['organic_metrics'];
    }

    /**
     * Sets organic_metrics
     *
     * @param \OpenAPI\Client\Model\VideoAllOfOrganicMetrics|null $organic_metrics organic_metrics
     *
     * @return self
     */
    public function setOrganicMetrics($organic_metrics)
    {
        $this->container['organic_metrics'] = $organic_metrics;

        return $this;
    }

    /**
     * Gets preview_image_url
     *
     * @return string|null
     */
    public function getPreviewImageUrl()
    {
        return $this->container['preview_image_url'];
    }

    /**
     * Sets preview_image_url
     *
     * @param string|null $preview_image_url preview_image_url
     *
     * @return self
     */
    public function setPreviewImageUrl($preview_image_url)
    {
        $this->container['preview_image_url'] = $preview_image_url;

        return $this;
    }

    /**
     * Gets promoted_metrics
     *
     * @return \OpenAPI\Client\Model\VideoAllOfPromotedMetrics|null
     */
    public function getPromotedMetrics()
    {
        return $this->container['promoted_metrics'];
    }

    /**
     * Sets promoted_metrics
     *
     * @param \OpenAPI\Client\Model\VideoAllOfPromotedMetrics|null $promoted_metrics promoted_metrics
     *
     * @return self
     */
    public function setPromotedMetrics($promoted_metrics)
    {
        $this->container['promoted_metrics'] = $promoted_metrics;

        return $this;
    }

    /**
     * Gets public_metrics
     *
     * @return \OpenAPI\Client\Model\VideoAllOfPublicMetrics|null
     */
    public function getPublicMetrics()
    {
        return $this->container['public_metrics'];
    }

    /**
     * Sets public_metrics
     *
     * @param \OpenAPI\Client\Model\VideoAllOfPublicMetrics|null $public_metrics public_metrics
     *
     * @return self
     */
    public function setPublicMetrics($public_metrics)
    {
        $this->container['public_metrics'] = $public_metrics;

        return $this;
    }

    /**
     * Gets variants
     *
     * @return \OpenAPI\Client\Model\Variant[]|null
     */
    public function getVariants()
    {
        return $this->container['variants'];
    }

    /**
     * Sets variants
     *
     * @param \OpenAPI\Client\Model\Variant[]|null $variants An array of all available variants of the media.
     *
     * @return self
     */
    public function setVariants($variants)
    {
        $this->container['variants'] = $variants;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


