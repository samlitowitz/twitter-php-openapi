<?php
/**
 * Poll
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.45
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Poll Class Doc Comment
 *
 * @category Class
 * @description Represent a Poll attached to a Tweet.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Poll implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Poll';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'duration_minutes' => 'int',
        'end_datetime' => '\DateTime',
        'id' => 'string',
        'options' => '\OpenAPI\Client\Model\PollOption[]',
        'voting_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'duration_minutes' => 'int32',
        'end_datetime' => 'date-time',
        'id' => null,
        'options' => null,
        'voting_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'duration_minutes' => 'duration_minutes',
        'end_datetime' => 'end_datetime',
        'id' => 'id',
        'options' => 'options',
        'voting_status' => 'voting_status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'duration_minutes' => 'setDurationMinutes',
        'end_datetime' => 'setEndDatetime',
        'id' => 'setId',
        'options' => 'setOptions',
        'voting_status' => 'setVotingStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'duration_minutes' => 'getDurationMinutes',
        'end_datetime' => 'getEndDatetime',
        'id' => 'getId',
        'options' => 'getOptions',
        'voting_status' => 'getVotingStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const VOTING_STATUS_OPEN = 'open';
    public const VOTING_STATUS_CLOSED = 'closed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVotingStatusAllowableValues()
    {
        return [
            self::VOTING_STATUS_OPEN,
            self::VOTING_STATUS_CLOSED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['duration_minutes'] = $data['duration_minutes'] ?? null;
        $this->container['end_datetime'] = $data['end_datetime'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['voting_status'] = $data['voting_status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['duration_minutes']) && ($this->container['duration_minutes'] > 10080)) {
            $invalidProperties[] = "invalid value for 'duration_minutes', must be smaller than or equal to 10080.";
        }

        if (!is_null($this->container['duration_minutes']) && ($this->container['duration_minutes'] < 5)) {
            $invalidProperties[] = "invalid value for 'duration_minutes', must be bigger than or equal to 5.";
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^[0-9]{1,19}$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[0-9]{1,19}$/.";
        }

        if ($this->container['options'] === null) {
            $invalidProperties[] = "'options' can't be null";
        }
        if ((count($this->container['options']) > 4)) {
            $invalidProperties[] = "invalid value for 'options', number of items must be less than or equal to 4.";
        }

        if ((count($this->container['options']) < 2)) {
            $invalidProperties[] = "invalid value for 'options', number of items must be greater than or equal to 2.";
        }

        $allowedValues = $this->getVotingStatusAllowableValues();
        if (!is_null($this->container['voting_status']) && !in_array($this->container['voting_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'voting_status', must be one of '%s'",
                $this->container['voting_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets duration_minutes
     *
     * @return int|null
     */
    public function getDurationMinutes()
    {
        return $this->container['duration_minutes'];
    }

    /**
     * Sets duration_minutes
     *
     * @param int|null $duration_minutes duration_minutes
     *
     * @return self
     */
    public function setDurationMinutes($duration_minutes)
    {

        if (!is_null($duration_minutes) && ($duration_minutes > 10080)) {
            throw new \InvalidArgumentException('invalid value for $duration_minutes when calling Poll., must be smaller than or equal to 10080.');
        }
        if (!is_null($duration_minutes) && ($duration_minutes < 5)) {
            throw new \InvalidArgumentException('invalid value for $duration_minutes when calling Poll., must be bigger than or equal to 5.');
        }

        $this->container['duration_minutes'] = $duration_minutes;

        return $this;
    }

    /**
     * Gets end_datetime
     *
     * @return \DateTime|null
     */
    public function getEndDatetime()
    {
        return $this->container['end_datetime'];
    }

    /**
     * Sets end_datetime
     *
     * @param \DateTime|null $end_datetime end_datetime
     *
     * @return self
     */
    public function setEndDatetime($end_datetime)
    {
        $this->container['end_datetime'] = $end_datetime;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier of this poll.
     *
     * @return self
     */
    public function setId($id)
    {

        if ((!preg_match("/^[0-9]{1,19}$/", $id))) {
            throw new \InvalidArgumentException("invalid value for $id when calling Poll., must conform to the pattern /^[0-9]{1,19}$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \OpenAPI\Client\Model\PollOption[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \OpenAPI\Client\Model\PollOption[] $options options
     *
     * @return self
     */
    public function setOptions($options)
    {

        if ((count($options) > 4)) {
            throw new \InvalidArgumentException('invalid value for $options when calling Poll., number of items must be less than or equal to 4.');
        }
        if ((count($options) < 2)) {
            throw new \InvalidArgumentException('invalid length for $options when calling Poll., number of items must be greater than or equal to 2.');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets voting_status
     *
     * @return string|null
     */
    public function getVotingStatus()
    {
        return $this->container['voting_status'];
    }

    /**
     * Sets voting_status
     *
     * @param string|null $voting_status voting_status
     *
     * @return self
     */
    public function setVotingStatus($voting_status)
    {
        $allowedValues = $this->getVotingStatusAllowableValues();
        if (!is_null($voting_status) && !in_array($voting_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'voting_status', must be one of '%s'",
                    $voting_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voting_status'] = $voting_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


