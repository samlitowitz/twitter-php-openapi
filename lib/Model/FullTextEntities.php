<?php
/**
 * FullTextEntities
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.45
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FullTextEntities Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class FullTextEntities implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FullTextEntities';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'annotations' => '\OpenAPI\Client\Model\FullTextEntitiesAnnotationsInner[]',
        'cashtags' => '\OpenAPI\Client\Model\CashtagEntity[]',
        'hashtags' => '\OpenAPI\Client\Model\HashtagEntity[]',
        'mentions' => '\OpenAPI\Client\Model\MentionEntity[]',
        'urls' => '\OpenAPI\Client\Model\UrlEntity[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'annotations' => null,
        'cashtags' => null,
        'hashtags' => null,
        'mentions' => null,
        'urls' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'annotations' => 'annotations',
        'cashtags' => 'cashtags',
        'hashtags' => 'hashtags',
        'mentions' => 'mentions',
        'urls' => 'urls'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'annotations' => 'setAnnotations',
        'cashtags' => 'setCashtags',
        'hashtags' => 'setHashtags',
        'mentions' => 'setMentions',
        'urls' => 'setUrls'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'annotations' => 'getAnnotations',
        'cashtags' => 'getCashtags',
        'hashtags' => 'getHashtags',
        'mentions' => 'getMentions',
        'urls' => 'getUrls'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['annotations'] = $data['annotations'] ?? null;
        $this->container['cashtags'] = $data['cashtags'] ?? null;
        $this->container['hashtags'] = $data['hashtags'] ?? null;
        $this->container['mentions'] = $data['mentions'] ?? null;
        $this->container['urls'] = $data['urls'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['annotations']) && (count($this->container['annotations']) < 1)) {
            $invalidProperties[] = "invalid value for 'annotations', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['cashtags']) && (count($this->container['cashtags']) < 1)) {
            $invalidProperties[] = "invalid value for 'cashtags', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['hashtags']) && (count($this->container['hashtags']) < 1)) {
            $invalidProperties[] = "invalid value for 'hashtags', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['mentions']) && (count($this->container['mentions']) < 1)) {
            $invalidProperties[] = "invalid value for 'mentions', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['urls']) && (count($this->container['urls']) < 1)) {
            $invalidProperties[] = "invalid value for 'urls', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets annotations
     *
     * @return \OpenAPI\Client\Model\FullTextEntitiesAnnotationsInner[]|null
     */
    public function getAnnotations()
    {
        return $this->container['annotations'];
    }

    /**
     * Sets annotations
     *
     * @param \OpenAPI\Client\Model\FullTextEntitiesAnnotationsInner[]|null $annotations annotations
     *
     * @return self
     */
    public function setAnnotations($annotations)
    {


        if (!is_null($annotations) && (count($annotations) < 1)) {
            throw new \InvalidArgumentException('invalid length for $annotations when calling FullTextEntities., number of items must be greater than or equal to 1.');
        }
        $this->container['annotations'] = $annotations;

        return $this;
    }

    /**
     * Gets cashtags
     *
     * @return \OpenAPI\Client\Model\CashtagEntity[]|null
     */
    public function getCashtags()
    {
        return $this->container['cashtags'];
    }

    /**
     * Sets cashtags
     *
     * @param \OpenAPI\Client\Model\CashtagEntity[]|null $cashtags cashtags
     *
     * @return self
     */
    public function setCashtags($cashtags)
    {


        if (!is_null($cashtags) && (count($cashtags) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cashtags when calling FullTextEntities., number of items must be greater than or equal to 1.');
        }
        $this->container['cashtags'] = $cashtags;

        return $this;
    }

    /**
     * Gets hashtags
     *
     * @return \OpenAPI\Client\Model\HashtagEntity[]|null
     */
    public function getHashtags()
    {
        return $this->container['hashtags'];
    }

    /**
     * Sets hashtags
     *
     * @param \OpenAPI\Client\Model\HashtagEntity[]|null $hashtags hashtags
     *
     * @return self
     */
    public function setHashtags($hashtags)
    {


        if (!is_null($hashtags) && (count($hashtags) < 1)) {
            throw new \InvalidArgumentException('invalid length for $hashtags when calling FullTextEntities., number of items must be greater than or equal to 1.');
        }
        $this->container['hashtags'] = $hashtags;

        return $this;
    }

    /**
     * Gets mentions
     *
     * @return \OpenAPI\Client\Model\MentionEntity[]|null
     */
    public function getMentions()
    {
        return $this->container['mentions'];
    }

    /**
     * Sets mentions
     *
     * @param \OpenAPI\Client\Model\MentionEntity[]|null $mentions mentions
     *
     * @return self
     */
    public function setMentions($mentions)
    {


        if (!is_null($mentions) && (count($mentions) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mentions when calling FullTextEntities., number of items must be greater than or equal to 1.');
        }
        $this->container['mentions'] = $mentions;

        return $this;
    }

    /**
     * Gets urls
     *
     * @return \OpenAPI\Client\Model\UrlEntity[]|null
     */
    public function getUrls()
    {
        return $this->container['urls'];
    }

    /**
     * Sets urls
     *
     * @param \OpenAPI\Client\Model\UrlEntity[]|null $urls urls
     *
     * @return self
     */
    public function setUrls($urls)
    {


        if (!is_null($urls) && (count($urls) < 1)) {
            throw new \InvalidArgumentException('invalid length for $urls when calling FullTextEntities., number of items must be greater than or equal to 1.');
        }
        $this->container['urls'] = $urls;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


