<?php
/**
 * User
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.45
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @description The Twitter User object.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created_at' => '\DateTime',
        'description' => 'string',
        'entities' => '\OpenAPI\Client\Model\UserEntities',
        'id' => 'string',
        'location' => 'string',
        'name' => 'string',
        'pinned_tweet_id' => 'string',
        'profile_image_url' => 'string',
        'protected' => 'bool',
        'public_metrics' => '\OpenAPI\Client\Model\UserPublicMetrics',
        'url' => 'string',
        'username' => 'string',
        'verified' => 'bool',
        'withheld' => '\OpenAPI\Client\Model\UserWithheld'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created_at' => 'date-time',
        'description' => null,
        'entities' => null,
        'id' => null,
        'location' => null,
        'name' => null,
        'pinned_tweet_id' => null,
        'profile_image_url' => 'uri',
        'protected' => null,
        'public_metrics' => null,
        'url' => null,
        'username' => null,
        'verified' => null,
        'withheld' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_at' => 'created_at',
        'description' => 'description',
        'entities' => 'entities',
        'id' => 'id',
        'location' => 'location',
        'name' => 'name',
        'pinned_tweet_id' => 'pinned_tweet_id',
        'profile_image_url' => 'profile_image_url',
        'protected' => 'protected',
        'public_metrics' => 'public_metrics',
        'url' => 'url',
        'username' => 'username',
        'verified' => 'verified',
        'withheld' => 'withheld'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_at' => 'setCreatedAt',
        'description' => 'setDescription',
        'entities' => 'setEntities',
        'id' => 'setId',
        'location' => 'setLocation',
        'name' => 'setName',
        'pinned_tweet_id' => 'setPinnedTweetId',
        'profile_image_url' => 'setProfileImageUrl',
        'protected' => 'setProtected',
        'public_metrics' => 'setPublicMetrics',
        'url' => 'setUrl',
        'username' => 'setUsername',
        'verified' => 'setVerified',
        'withheld' => 'setWithheld'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_at' => 'getCreatedAt',
        'description' => 'getDescription',
        'entities' => 'getEntities',
        'id' => 'getId',
        'location' => 'getLocation',
        'name' => 'getName',
        'pinned_tweet_id' => 'getPinnedTweetId',
        'profile_image_url' => 'getProfileImageUrl',
        'protected' => 'getProtected',
        'public_metrics' => 'getPublicMetrics',
        'url' => 'getUrl',
        'username' => 'getUsername',
        'verified' => 'getVerified',
        'withheld' => 'getWithheld'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['entities'] = $data['entities'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['pinned_tweet_id'] = $data['pinned_tweet_id'] ?? null;
        $this->container['profile_image_url'] = $data['profile_image_url'] ?? null;
        $this->container['protected'] = $data['protected'] ?? null;
        $this->container['public_metrics'] = $data['public_metrics'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['verified'] = $data['verified'] ?? null;
        $this->container['withheld'] = $data['withheld'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^[0-9]{1,19}\\z/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[0-9]{1,19}\\z/.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if (!is_null($this->container['pinned_tweet_id']) && !preg_match("/^[0-9]{1,19}$/", $this->container['pinned_tweet_id'])) {
            $invalidProperties[] = "invalid value for 'pinned_tweet_id', must be conform to the pattern /^[0-9]{1,19}$/.";
        }

        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if (!preg_match("/^[A-Za-z0-9_]{1,15}$/", $this->container['username'])) {
            $invalidProperties[] = "invalid value for 'username', must be conform to the pattern /^[A-Za-z0-9_]{1,15}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Creation time of this User.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The text of this User's profile description (also known as bio), if the User provided one.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets entities
     *
     * @return \OpenAPI\Client\Model\UserEntities|null
     */
    public function getEntities()
    {
        return $this->container['entities'];
    }

    /**
     * Sets entities
     *
     * @param \OpenAPI\Client\Model\UserEntities|null $entities entities
     *
     * @return self
     */
    public function setEntities($entities)
    {
        $this->container['entities'] = $entities;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     *
     * @return self
     */
    public function setId($id)
    {

        if ((!preg_match("/^[0-9]{1,19}\\z/", $id))) {
            throw new \InvalidArgumentException("invalid value for $id when calling User., must conform to the pattern /^[0-9]{1,19}\\z/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location The location specified in the User's profile, if the User provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The friendly name of this User, as shown on their profile.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pinned_tweet_id
     *
     * @return string|null
     */
    public function getPinnedTweetId()
    {
        return $this->container['pinned_tweet_id'];
    }

    /**
     * Sets pinned_tweet_id
     *
     * @param string|null $pinned_tweet_id Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     *
     * @return self
     */
    public function setPinnedTweetId($pinned_tweet_id)
    {

        if (!is_null($pinned_tweet_id) && (!preg_match("/^[0-9]{1,19}$/", $pinned_tweet_id))) {
            throw new \InvalidArgumentException("invalid value for $pinned_tweet_id when calling User., must conform to the pattern /^[0-9]{1,19}$/.");
        }

        $this->container['pinned_tweet_id'] = $pinned_tweet_id;

        return $this;
    }

    /**
     * Gets profile_image_url
     *
     * @return string|null
     */
    public function getProfileImageUrl()
    {
        return $this->container['profile_image_url'];
    }

    /**
     * Sets profile_image_url
     *
     * @param string|null $profile_image_url The URL to the profile image for this User.
     *
     * @return self
     */
    public function setProfileImageUrl($profile_image_url)
    {
        $this->container['profile_image_url'] = $profile_image_url;

        return $this;
    }

    /**
     * Gets protected
     *
     * @return bool|null
     */
    public function getProtected()
    {
        return $this->container['protected'];
    }

    /**
     * Sets protected
     *
     * @param bool|null $protected Indicates if this User has chosen to protect their Tweets (in other words, if this User's Tweets are private).
     *
     * @return self
     */
    public function setProtected($protected)
    {
        $this->container['protected'] = $protected;

        return $this;
    }

    /**
     * Gets public_metrics
     *
     * @return \OpenAPI\Client\Model\UserPublicMetrics|null
     */
    public function getPublicMetrics()
    {
        return $this->container['public_metrics'];
    }

    /**
     * Sets public_metrics
     *
     * @param \OpenAPI\Client\Model\UserPublicMetrics|null $public_metrics public_metrics
     *
     * @return self
     */
    public function setPublicMetrics($public_metrics)
    {
        $this->container['public_metrics'] = $public_metrics;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url The URL specified in the User's profile.
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username The Twitter handle (screen name) of this user.
     *
     * @return self
     */
    public function setUsername($username)
    {

        if ((!preg_match("/^[A-Za-z0-9_]{1,15}$/", $username))) {
            throw new \InvalidArgumentException("invalid value for $username when calling User., must conform to the pattern /^[A-Za-z0-9_]{1,15}$/.");
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool|null
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool|null $verified Indicate if this User is a verified Twitter User.
     *
     * @return self
     */
    public function setVerified($verified)
    {
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets withheld
     *
     * @return \OpenAPI\Client\Model\UserWithheld|null
     */
    public function getWithheld()
    {
        return $this->container['withheld'];
    }

    /**
     * Sets withheld
     *
     * @param \OpenAPI\Client\Model\UserWithheld|null $withheld withheld
     *
     * @return self
     */
    public function setWithheld($withheld)
    {
        $this->container['withheld'] = $withheld;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


