<?php
/**
 * Expansions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.45
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Expansions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Expansions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Expansions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'media' => '\OpenAPI\Client\Model\Media[]',
        'places' => '\OpenAPI\Client\Model\Place[]',
        'polls' => '\OpenAPI\Client\Model\Poll[]',
        'topics' => '\OpenAPI\Client\Model\Topic[]',
        'tweets' => '\OpenAPI\Client\Model\Tweet[]',
        'users' => '\OpenAPI\Client\Model\User[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'media' => null,
        'places' => null,
        'polls' => null,
        'topics' => null,
        'tweets' => null,
        'users' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'media' => 'media',
        'places' => 'places',
        'polls' => 'polls',
        'topics' => 'topics',
        'tweets' => 'tweets',
        'users' => 'users'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'media' => 'setMedia',
        'places' => 'setPlaces',
        'polls' => 'setPolls',
        'topics' => 'setTopics',
        'tweets' => 'setTweets',
        'users' => 'setUsers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'media' => 'getMedia',
        'places' => 'getPlaces',
        'polls' => 'getPolls',
        'topics' => 'getTopics',
        'tweets' => 'getTweets',
        'users' => 'getUsers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['media'] = $data['media'] ?? null;
        $this->container['places'] = $data['places'] ?? null;
        $this->container['polls'] = $data['polls'] ?? null;
        $this->container['topics'] = $data['topics'] ?? null;
        $this->container['tweets'] = $data['tweets'] ?? null;
        $this->container['users'] = $data['users'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['media']) && (count($this->container['media']) < 1)) {
            $invalidProperties[] = "invalid value for 'media', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['places']) && (count($this->container['places']) < 1)) {
            $invalidProperties[] = "invalid value for 'places', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['polls']) && (count($this->container['polls']) < 1)) {
            $invalidProperties[] = "invalid value for 'polls', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['topics']) && (count($this->container['topics']) < 1)) {
            $invalidProperties[] = "invalid value for 'topics', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['tweets']) && (count($this->container['tweets']) < 1)) {
            $invalidProperties[] = "invalid value for 'tweets', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['users']) && (count($this->container['users']) < 1)) {
            $invalidProperties[] = "invalid value for 'users', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets media
     *
     * @return \OpenAPI\Client\Model\Media[]|null
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \OpenAPI\Client\Model\Media[]|null $media media
     *
     * @return self
     */
    public function setMedia($media)
    {


        if (!is_null($media) && (count($media) < 1)) {
            throw new \InvalidArgumentException('invalid length for $media when calling Expansions., number of items must be greater than or equal to 1.');
        }
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets places
     *
     * @return \OpenAPI\Client\Model\Place[]|null
     */
    public function getPlaces()
    {
        return $this->container['places'];
    }

    /**
     * Sets places
     *
     * @param \OpenAPI\Client\Model\Place[]|null $places places
     *
     * @return self
     */
    public function setPlaces($places)
    {


        if (!is_null($places) && (count($places) < 1)) {
            throw new \InvalidArgumentException('invalid length for $places when calling Expansions., number of items must be greater than or equal to 1.');
        }
        $this->container['places'] = $places;

        return $this;
    }

    /**
     * Gets polls
     *
     * @return \OpenAPI\Client\Model\Poll[]|null
     */
    public function getPolls()
    {
        return $this->container['polls'];
    }

    /**
     * Sets polls
     *
     * @param \OpenAPI\Client\Model\Poll[]|null $polls polls
     *
     * @return self
     */
    public function setPolls($polls)
    {


        if (!is_null($polls) && (count($polls) < 1)) {
            throw new \InvalidArgumentException('invalid length for $polls when calling Expansions., number of items must be greater than or equal to 1.');
        }
        $this->container['polls'] = $polls;

        return $this;
    }

    /**
     * Gets topics
     *
     * @return \OpenAPI\Client\Model\Topic[]|null
     */
    public function getTopics()
    {
        return $this->container['topics'];
    }

    /**
     * Sets topics
     *
     * @param \OpenAPI\Client\Model\Topic[]|null $topics topics
     *
     * @return self
     */
    public function setTopics($topics)
    {


        if (!is_null($topics) && (count($topics) < 1)) {
            throw new \InvalidArgumentException('invalid length for $topics when calling Expansions., number of items must be greater than or equal to 1.');
        }
        $this->container['topics'] = $topics;

        return $this;
    }

    /**
     * Gets tweets
     *
     * @return \OpenAPI\Client\Model\Tweet[]|null
     */
    public function getTweets()
    {
        return $this->container['tweets'];
    }

    /**
     * Sets tweets
     *
     * @param \OpenAPI\Client\Model\Tweet[]|null $tweets tweets
     *
     * @return self
     */
    public function setTweets($tweets)
    {


        if (!is_null($tweets) && (count($tweets) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tweets when calling Expansions., number of items must be greater than or equal to 1.');
        }
        $this->container['tweets'] = $tweets;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \OpenAPI\Client\Model\User[]|null
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \OpenAPI\Client\Model\User[]|null $users users
     *
     * @return self
     */
    public function setUsers($users)
    {


        if (!is_null($users) && (count($users) < 1)) {
            throw new \InvalidArgumentException('invalid length for $users when calling Expansions., number of items must be greater than or equal to 1.');
        }
        $this->container['users'] = $users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


