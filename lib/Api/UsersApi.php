<?php
/**
 * UsersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.45
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * UsersApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UsersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation findMyUser
     *
     * User lookup me
     *
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get2UsersMeResponse|\OpenAPI\Client\Model\Error
     */
    public function findMyUser($user_fields = null, $expansions = null, $tweet_fields = null)
    {
        list($response) = $this->findMyUserWithHttpInfo($user_fields, $expansions, $tweet_fields);
        return $response;
    }

    /**
     * Operation findMyUserWithHttpInfo
     *
     * User lookup me
     *
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get2UsersMeResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function findMyUserWithHttpInfo($user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $request = $this->findMyUserRequest($user_fields, $expansions, $tweet_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Get2UsersMeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get2UsersMeResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get2UsersMeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Get2UsersMeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get2UsersMeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findMyUserAsync
     *
     * User lookup me
     *
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findMyUserAsync($user_fields = null, $expansions = null, $tweet_fields = null)
    {
        return $this->findMyUserAsyncWithHttpInfo($user_fields, $expansions, $tweet_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findMyUserAsyncWithHttpInfo
     *
     * User lookup me
     *
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findMyUserAsyncWithHttpInfo($user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $returnType = '\OpenAPI\Client\Model\Get2UsersMeResponse';
        $request = $this->findMyUserRequest($user_fields, $expansions, $tweet_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findMyUser'
     *
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findMyUserRequest($user_fields = null, $expansions = null, $tweet_fields = null)
    {
        if ($user_fields !== null && count($user_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$user_fields" when calling UsersApi.findMyUser, number of items must be greater than or equal to 1.');
        }

        if ($expansions !== null && count($expansions) < 1) {
            throw new \InvalidArgumentException('invalid value for "$expansions" when calling UsersApi.findMyUser, number of items must be greater than or equal to 1.');
        }

        if ($tweet_fields !== null && count($tweet_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$tweet_fields" when calling UsersApi.findMyUser, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/2/users/me';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_fields,
            'user.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expansions,
            'expansions', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tweet_fields,
            'tweet.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findUserById
     *
     * User lookup by ID
     *
     * @param  string $id The ID of the User to lookup. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get2UsersIdResponse|\OpenAPI\Client\Model\Error
     */
    public function findUserById($id, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        list($response) = $this->findUserByIdWithHttpInfo($id, $user_fields, $expansions, $tweet_fields);
        return $response;
    }

    /**
     * Operation findUserByIdWithHttpInfo
     *
     * User lookup by ID
     *
     * @param  string $id The ID of the User to lookup. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get2UsersIdResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function findUserByIdWithHttpInfo($id, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $request = $this->findUserByIdRequest($id, $user_fields, $expansions, $tweet_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Get2UsersIdResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get2UsersIdResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get2UsersIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Get2UsersIdResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get2UsersIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findUserByIdAsync
     *
     * User lookup by ID
     *
     * @param  string $id The ID of the User to lookup. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findUserByIdAsync($id, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        return $this->findUserByIdAsyncWithHttpInfo($id, $user_fields, $expansions, $tweet_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findUserByIdAsyncWithHttpInfo
     *
     * User lookup by ID
     *
     * @param  string $id The ID of the User to lookup. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findUserByIdAsyncWithHttpInfo($id, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $returnType = '\OpenAPI\Client\Model\Get2UsersIdResponse';
        $request = $this->findUserByIdRequest($id, $user_fields, $expansions, $tweet_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findUserById'
     *
     * @param  string $id The ID of the User to lookup. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findUserByIdRequest($id, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling findUserById'
            );
        }
        if (!preg_match("/^[0-9]{1,19}\\z/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling UsersApi.findUserById, must conform to the pattern /^[0-9]{1,19}\\z/.");
        }

        if ($user_fields !== null && count($user_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$user_fields" when calling UsersApi.findUserById, number of items must be greater than or equal to 1.');
        }

        if ($expansions !== null && count($expansions) < 1) {
            throw new \InvalidArgumentException('invalid value for "$expansions" when calling UsersApi.findUserById, number of items must be greater than or equal to 1.');
        }

        if ($tweet_fields !== null && count($tweet_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$tweet_fields" when calling UsersApi.findUserById, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/2/users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_fields,
            'user.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expansions,
            'expansions', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tweet_fields,
            'tweet.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findUserByUsername
     *
     * User lookup by username
     *
     * @param  string $username A username. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get2UsersByUsernameUsernameResponse|\OpenAPI\Client\Model\Error
     */
    public function findUserByUsername($username, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        list($response) = $this->findUserByUsernameWithHttpInfo($username, $user_fields, $expansions, $tweet_fields);
        return $response;
    }

    /**
     * Operation findUserByUsernameWithHttpInfo
     *
     * User lookup by username
     *
     * @param  string $username A username. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get2UsersByUsernameUsernameResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function findUserByUsernameWithHttpInfo($username, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $request = $this->findUserByUsernameRequest($username, $user_fields, $expansions, $tweet_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Get2UsersByUsernameUsernameResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get2UsersByUsernameUsernameResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get2UsersByUsernameUsernameResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Get2UsersByUsernameUsernameResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get2UsersByUsernameUsernameResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findUserByUsernameAsync
     *
     * User lookup by username
     *
     * @param  string $username A username. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findUserByUsernameAsync($username, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        return $this->findUserByUsernameAsyncWithHttpInfo($username, $user_fields, $expansions, $tweet_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findUserByUsernameAsyncWithHttpInfo
     *
     * User lookup by username
     *
     * @param  string $username A username. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findUserByUsernameAsyncWithHttpInfo($username, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $returnType = '\OpenAPI\Client\Model\Get2UsersByUsernameUsernameResponse';
        $request = $this->findUserByUsernameRequest($username, $user_fields, $expansions, $tweet_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findUserByUsername'
     *
     * @param  string $username A username. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findUserByUsernameRequest($username, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling findUserByUsername'
            );
        }
        if (!preg_match("/^[A-Za-z0-9_]{1,15}$/", $username)) {
            throw new \InvalidArgumentException("invalid value for \"username\" when calling UsersApi.findUserByUsername, must conform to the pattern /^[A-Za-z0-9_]{1,15}$/.");
        }

        if ($user_fields !== null && count($user_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$user_fields" when calling UsersApi.findUserByUsername, number of items must be greater than or equal to 1.');
        }

        if ($expansions !== null && count($expansions) < 1) {
            throw new \InvalidArgumentException('invalid value for "$expansions" when calling UsersApi.findUserByUsername, number of items must be greater than or equal to 1.');
        }

        if ($tweet_fields !== null && count($tweet_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$tweet_fields" when calling UsersApi.findUserByUsername, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/2/users/by/username/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_fields,
            'user.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expansions,
            'expansions', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tweet_fields,
            'tweet.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findUsersById
     *
     * User lookup by IDs
     *
     * @param  string[] $ids A list of User IDs, comma-separated. You can specify up to 100 IDs. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get2UsersResponse|\OpenAPI\Client\Model\Error
     */
    public function findUsersById($ids, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        list($response) = $this->findUsersByIdWithHttpInfo($ids, $user_fields, $expansions, $tweet_fields);
        return $response;
    }

    /**
     * Operation findUsersByIdWithHttpInfo
     *
     * User lookup by IDs
     *
     * @param  string[] $ids A list of User IDs, comma-separated. You can specify up to 100 IDs. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get2UsersResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function findUsersByIdWithHttpInfo($ids, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $request = $this->findUsersByIdRequest($ids, $user_fields, $expansions, $tweet_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Get2UsersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get2UsersResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get2UsersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Get2UsersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get2UsersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findUsersByIdAsync
     *
     * User lookup by IDs
     *
     * @param  string[] $ids A list of User IDs, comma-separated. You can specify up to 100 IDs. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findUsersByIdAsync($ids, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        return $this->findUsersByIdAsyncWithHttpInfo($ids, $user_fields, $expansions, $tweet_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findUsersByIdAsyncWithHttpInfo
     *
     * User lookup by IDs
     *
     * @param  string[] $ids A list of User IDs, comma-separated. You can specify up to 100 IDs. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findUsersByIdAsyncWithHttpInfo($ids, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $returnType = '\OpenAPI\Client\Model\Get2UsersResponse';
        $request = $this->findUsersByIdRequest($ids, $user_fields, $expansions, $tweet_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findUsersById'
     *
     * @param  string[] $ids A list of User IDs, comma-separated. You can specify up to 100 IDs. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findUsersByIdRequest($ids, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling findUsersById'
            );
        }
        if (count($ids) > 100) {
            throw new \InvalidArgumentException('invalid value for "$ids" when calling UsersApi.findUsersById, number of items must be less than or equal to 100.');
        }
        if (count($ids) < 1) {
            throw new \InvalidArgumentException('invalid value for "$ids" when calling UsersApi.findUsersById, number of items must be greater than or equal to 1.');
        }

        if ($user_fields !== null && count($user_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$user_fields" when calling UsersApi.findUsersById, number of items must be greater than or equal to 1.');
        }

        if ($expansions !== null && count($expansions) < 1) {
            throw new \InvalidArgumentException('invalid value for "$expansions" when calling UsersApi.findUsersById, number of items must be greater than or equal to 1.');
        }

        if ($tweet_fields !== null && count($tweet_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$tweet_fields" when calling UsersApi.findUsersById, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/2/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_fields,
            'user.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expansions,
            'expansions', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tweet_fields,
            'tweet.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findUsersByUsername
     *
     * User lookup by usernames
     *
     * @param  string[] $usernames A list of usernames, comma-separated. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get2UsersByResponse|\OpenAPI\Client\Model\Error
     */
    public function findUsersByUsername($usernames, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        list($response) = $this->findUsersByUsernameWithHttpInfo($usernames, $user_fields, $expansions, $tweet_fields);
        return $response;
    }

    /**
     * Operation findUsersByUsernameWithHttpInfo
     *
     * User lookup by usernames
     *
     * @param  string[] $usernames A list of usernames, comma-separated. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get2UsersByResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function findUsersByUsernameWithHttpInfo($usernames, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $request = $this->findUsersByUsernameRequest($usernames, $user_fields, $expansions, $tweet_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Get2UsersByResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get2UsersByResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get2UsersByResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Get2UsersByResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get2UsersByResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findUsersByUsernameAsync
     *
     * User lookup by usernames
     *
     * @param  string[] $usernames A list of usernames, comma-separated. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findUsersByUsernameAsync($usernames, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        return $this->findUsersByUsernameAsyncWithHttpInfo($usernames, $user_fields, $expansions, $tweet_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findUsersByUsernameAsyncWithHttpInfo
     *
     * User lookup by usernames
     *
     * @param  string[] $usernames A list of usernames, comma-separated. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findUsersByUsernameAsyncWithHttpInfo($usernames, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $returnType = '\OpenAPI\Client\Model\Get2UsersByResponse';
        $request = $this->findUsersByUsernameRequest($usernames, $user_fields, $expansions, $tweet_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findUsersByUsername'
     *
     * @param  string[] $usernames A list of usernames, comma-separated. (required)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findUsersByUsernameRequest($usernames, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        // verify the required parameter 'usernames' is set
        if ($usernames === null || (is_array($usernames) && count($usernames) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usernames when calling findUsersByUsername'
            );
        }
        if (count($usernames) > 100) {
            throw new \InvalidArgumentException('invalid value for "$usernames" when calling UsersApi.findUsersByUsername, number of items must be less than or equal to 100.');
        }
        if (count($usernames) < 1) {
            throw new \InvalidArgumentException('invalid value for "$usernames" when calling UsersApi.findUsersByUsername, number of items must be greater than or equal to 1.');
        }

        if ($user_fields !== null && count($user_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$user_fields" when calling UsersApi.findUsersByUsername, number of items must be greater than or equal to 1.');
        }

        if ($expansions !== null && count($expansions) < 1) {
            throw new \InvalidArgumentException('invalid value for "$expansions" when calling UsersApi.findUsersByUsername, number of items must be greater than or equal to 1.');
        }

        if ($tweet_fields !== null && count($tweet_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$tweet_fields" when calling UsersApi.findUsersByUsername, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/2/users/by';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $usernames,
            'usernames', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_fields,
            'user.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expansions,
            'expansions', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tweet_fields,
            'tweet.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listGetFollowers
     *
     * Returns User objects that follow a List by the provided List ID
     *
     * @param  string $id The ID of the List. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get2ListsIdFollowersResponse|\OpenAPI\Client\Model\Error
     */
    public function listGetFollowers($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        list($response) = $this->listGetFollowersWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);
        return $response;
    }

    /**
     * Operation listGetFollowersWithHttpInfo
     *
     * Returns User objects that follow a List by the provided List ID
     *
     * @param  string $id The ID of the List. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get2ListsIdFollowersResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function listGetFollowersWithHttpInfo($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $request = $this->listGetFollowersRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Get2ListsIdFollowersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get2ListsIdFollowersResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get2ListsIdFollowersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Get2ListsIdFollowersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get2ListsIdFollowersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listGetFollowersAsync
     *
     * Returns User objects that follow a List by the provided List ID
     *
     * @param  string $id The ID of the List. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listGetFollowersAsync($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        return $this->listGetFollowersAsyncWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listGetFollowersAsyncWithHttpInfo
     *
     * Returns User objects that follow a List by the provided List ID
     *
     * @param  string $id The ID of the List. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listGetFollowersAsyncWithHttpInfo($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $returnType = '\OpenAPI\Client\Model\Get2ListsIdFollowersResponse';
        $request = $this->listGetFollowersRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listGetFollowers'
     *
     * @param  string $id The ID of the List. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listGetFollowersRequest($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listGetFollowers'
            );
        }
        if (!preg_match("/^[0-9]{1,19}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling UsersApi.listGetFollowers, must conform to the pattern /^[0-9]{1,19}$/.");
        }

        if ($max_results !== null && $max_results > 100) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.listGetFollowers, must be smaller than or equal to 100.');
        }
        if ($max_results !== null && $max_results < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.listGetFollowers, must be bigger than or equal to 1.');
        }

        if ($pagination_token !== null && strlen($pagination_token) > 19) {
            throw new \InvalidArgumentException('invalid length for "$pagination_token" when calling UsersApi.listGetFollowers, must be smaller than or equal to 19.');
        }
        if ($pagination_token !== null && strlen($pagination_token) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pagination_token" when calling UsersApi.listGetFollowers, must be bigger than or equal to 1.');
        }

        if ($user_fields !== null && count($user_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$user_fields" when calling UsersApi.listGetFollowers, number of items must be greater than or equal to 1.');
        }

        if ($expansions !== null && count($expansions) < 1) {
            throw new \InvalidArgumentException('invalid value for "$expansions" when calling UsersApi.listGetFollowers, number of items must be greater than or equal to 1.');
        }

        if ($tweet_fields !== null && count($tweet_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$tweet_fields" when calling UsersApi.listGetFollowers, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/2/lists/{id}/followers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_results,
            'max_results', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagination_token,
            'pagination_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_fields,
            'user.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expansions,
            'expansions', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tweet_fields,
            'tweet.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listGetMembers
     *
     * Returns User objects that are members of a List by the provided List ID.
     *
     * @param  string $id The ID of the List. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get2ListsIdMembersResponse|\OpenAPI\Client\Model\Error
     */
    public function listGetMembers($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        list($response) = $this->listGetMembersWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);
        return $response;
    }

    /**
     * Operation listGetMembersWithHttpInfo
     *
     * Returns User objects that are members of a List by the provided List ID.
     *
     * @param  string $id The ID of the List. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get2ListsIdMembersResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function listGetMembersWithHttpInfo($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $request = $this->listGetMembersRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Get2ListsIdMembersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get2ListsIdMembersResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get2ListsIdMembersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Get2ListsIdMembersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get2ListsIdMembersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listGetMembersAsync
     *
     * Returns User objects that are members of a List by the provided List ID.
     *
     * @param  string $id The ID of the List. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listGetMembersAsync($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        return $this->listGetMembersAsyncWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listGetMembersAsyncWithHttpInfo
     *
     * Returns User objects that are members of a List by the provided List ID.
     *
     * @param  string $id The ID of the List. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listGetMembersAsyncWithHttpInfo($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $returnType = '\OpenAPI\Client\Model\Get2ListsIdMembersResponse';
        $request = $this->listGetMembersRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listGetMembers'
     *
     * @param  string $id The ID of the List. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listGetMembersRequest($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listGetMembers'
            );
        }
        if (!preg_match("/^[0-9]{1,19}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling UsersApi.listGetMembers, must conform to the pattern /^[0-9]{1,19}$/.");
        }

        if ($max_results !== null && $max_results > 100) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.listGetMembers, must be smaller than or equal to 100.');
        }
        if ($max_results !== null && $max_results < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.listGetMembers, must be bigger than or equal to 1.');
        }

        if ($pagination_token !== null && strlen($pagination_token) > 19) {
            throw new \InvalidArgumentException('invalid length for "$pagination_token" when calling UsersApi.listGetMembers, must be smaller than or equal to 19.');
        }
        if ($pagination_token !== null && strlen($pagination_token) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pagination_token" when calling UsersApi.listGetMembers, must be bigger than or equal to 1.');
        }

        if ($user_fields !== null && count($user_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$user_fields" when calling UsersApi.listGetMembers, number of items must be greater than or equal to 1.');
        }

        if ($expansions !== null && count($expansions) < 1) {
            throw new \InvalidArgumentException('invalid value for "$expansions" when calling UsersApi.listGetMembers, number of items must be greater than or equal to 1.');
        }

        if ($tweet_fields !== null && count($tweet_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$tweet_fields" when calling UsersApi.listGetMembers, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/2/lists/{id}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_results,
            'max_results', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagination_token,
            'pagination_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_fields,
            'user.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expansions,
            'expansions', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tweet_fields,
            'tweet.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tweetsIdLikingUsers
     *
     * Returns User objects that have liked the provided Tweet ID
     *
     * @param  string $id A single Tweet ID. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get2TweetsIdLikingUsersResponse|\OpenAPI\Client\Model\Error
     */
    public function tweetsIdLikingUsers($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        list($response) = $this->tweetsIdLikingUsersWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);
        return $response;
    }

    /**
     * Operation tweetsIdLikingUsersWithHttpInfo
     *
     * Returns User objects that have liked the provided Tweet ID
     *
     * @param  string $id A single Tweet ID. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get2TweetsIdLikingUsersResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function tweetsIdLikingUsersWithHttpInfo($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $request = $this->tweetsIdLikingUsersRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Get2TweetsIdLikingUsersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get2TweetsIdLikingUsersResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get2TweetsIdLikingUsersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Get2TweetsIdLikingUsersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get2TweetsIdLikingUsersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tweetsIdLikingUsersAsync
     *
     * Returns User objects that have liked the provided Tweet ID
     *
     * @param  string $id A single Tweet ID. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tweetsIdLikingUsersAsync($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        return $this->tweetsIdLikingUsersAsyncWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tweetsIdLikingUsersAsyncWithHttpInfo
     *
     * Returns User objects that have liked the provided Tweet ID
     *
     * @param  string $id A single Tweet ID. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tweetsIdLikingUsersAsyncWithHttpInfo($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $returnType = '\OpenAPI\Client\Model\Get2TweetsIdLikingUsersResponse';
        $request = $this->tweetsIdLikingUsersRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tweetsIdLikingUsers'
     *
     * @param  string $id A single Tweet ID. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tweetsIdLikingUsersRequest($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling tweetsIdLikingUsers'
            );
        }
        if (!preg_match("/^[0-9]{1,19}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling UsersApi.tweetsIdLikingUsers, must conform to the pattern /^[0-9]{1,19}$/.");
        }

        if ($max_results !== null && $max_results > 100) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.tweetsIdLikingUsers, must be smaller than or equal to 100.');
        }
        if ($max_results !== null && $max_results < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.tweetsIdLikingUsers, must be bigger than or equal to 1.');
        }

        if ($pagination_token !== null && strlen($pagination_token) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pagination_token" when calling UsersApi.tweetsIdLikingUsers, must be bigger than or equal to 1.');
        }

        if ($user_fields !== null && count($user_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$user_fields" when calling UsersApi.tweetsIdLikingUsers, number of items must be greater than or equal to 1.');
        }

        if ($expansions !== null && count($expansions) < 1) {
            throw new \InvalidArgumentException('invalid value for "$expansions" when calling UsersApi.tweetsIdLikingUsers, number of items must be greater than or equal to 1.');
        }

        if ($tweet_fields !== null && count($tweet_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$tweet_fields" when calling UsersApi.tweetsIdLikingUsers, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/2/tweets/{id}/liking_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_results,
            'max_results', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagination_token,
            'pagination_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_fields,
            'user.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expansions,
            'expansions', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tweet_fields,
            'tweet.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tweetsIdRetweetingUsers
     *
     * Returns User objects that have retweeted the provided Tweet ID
     *
     * @param  string $id A single Tweet ID. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get2TweetsIdRetweetedByResponse|\OpenAPI\Client\Model\Error
     */
    public function tweetsIdRetweetingUsers($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        list($response) = $this->tweetsIdRetweetingUsersWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);
        return $response;
    }

    /**
     * Operation tweetsIdRetweetingUsersWithHttpInfo
     *
     * Returns User objects that have retweeted the provided Tweet ID
     *
     * @param  string $id A single Tweet ID. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get2TweetsIdRetweetedByResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function tweetsIdRetweetingUsersWithHttpInfo($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $request = $this->tweetsIdRetweetingUsersRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Get2TweetsIdRetweetedByResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get2TweetsIdRetweetedByResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get2TweetsIdRetweetedByResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Get2TweetsIdRetweetedByResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get2TweetsIdRetweetedByResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tweetsIdRetweetingUsersAsync
     *
     * Returns User objects that have retweeted the provided Tweet ID
     *
     * @param  string $id A single Tweet ID. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tweetsIdRetweetingUsersAsync($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        return $this->tweetsIdRetweetingUsersAsyncWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tweetsIdRetweetingUsersAsyncWithHttpInfo
     *
     * Returns User objects that have retweeted the provided Tweet ID
     *
     * @param  string $id A single Tweet ID. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tweetsIdRetweetingUsersAsyncWithHttpInfo($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $returnType = '\OpenAPI\Client\Model\Get2TweetsIdRetweetedByResponse';
        $request = $this->tweetsIdRetweetingUsersRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tweetsIdRetweetingUsers'
     *
     * @param  string $id A single Tweet ID. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tweetsIdRetweetingUsersRequest($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling tweetsIdRetweetingUsers'
            );
        }
        if (!preg_match("/^[0-9]{1,19}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling UsersApi.tweetsIdRetweetingUsers, must conform to the pattern /^[0-9]{1,19}$/.");
        }

        if ($max_results !== null && $max_results > 100) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.tweetsIdRetweetingUsers, must be smaller than or equal to 100.');
        }
        if ($max_results !== null && $max_results < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.tweetsIdRetweetingUsers, must be bigger than or equal to 1.');
        }

        if ($pagination_token !== null && strlen($pagination_token) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pagination_token" when calling UsersApi.tweetsIdRetweetingUsers, must be bigger than or equal to 1.');
        }

        if ($user_fields !== null && count($user_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$user_fields" when calling UsersApi.tweetsIdRetweetingUsers, number of items must be greater than or equal to 1.');
        }

        if ($expansions !== null && count($expansions) < 1) {
            throw new \InvalidArgumentException('invalid value for "$expansions" when calling UsersApi.tweetsIdRetweetingUsers, number of items must be greater than or equal to 1.');
        }

        if ($tweet_fields !== null && count($tweet_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$tweet_fields" when calling UsersApi.tweetsIdRetweetingUsers, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/2/tweets/{id}/retweeted_by';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_results,
            'max_results', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagination_token,
            'pagination_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_fields,
            'user.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expansions,
            'expansions', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tweet_fields,
            'tweet.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersIdBlock
     *
     * Block User by User ID
     *
     * @param  string $id The ID of the authenticated source User that is requesting to block the target User. (required)
     * @param  \OpenAPI\Client\Model\BlockUserRequest $block_user_request block_user_request (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BlockUserMutationResponse|\OpenAPI\Client\Model\Error
     */
    public function usersIdBlock($id, $block_user_request)
    {
        list($response) = $this->usersIdBlockWithHttpInfo($id, $block_user_request);
        return $response;
    }

    /**
     * Operation usersIdBlockWithHttpInfo
     *
     * Block User by User ID
     *
     * @param  string $id The ID of the authenticated source User that is requesting to block the target User. (required)
     * @param  \OpenAPI\Client\Model\BlockUserRequest $block_user_request (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BlockUserMutationResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersIdBlockWithHttpInfo($id, $block_user_request)
    {
        $request = $this->usersIdBlockRequest($id, $block_user_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BlockUserMutationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BlockUserMutationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BlockUserMutationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BlockUserMutationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BlockUserMutationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersIdBlockAsync
     *
     * Block User by User ID
     *
     * @param  string $id The ID of the authenticated source User that is requesting to block the target User. (required)
     * @param  \OpenAPI\Client\Model\BlockUserRequest $block_user_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdBlockAsync($id, $block_user_request)
    {
        return $this->usersIdBlockAsyncWithHttpInfo($id, $block_user_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersIdBlockAsyncWithHttpInfo
     *
     * Block User by User ID
     *
     * @param  string $id The ID of the authenticated source User that is requesting to block the target User. (required)
     * @param  \OpenAPI\Client\Model\BlockUserRequest $block_user_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdBlockAsyncWithHttpInfo($id, $block_user_request)
    {
        $returnType = '\OpenAPI\Client\Model\BlockUserMutationResponse';
        $request = $this->usersIdBlockRequest($id, $block_user_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersIdBlock'
     *
     * @param  string $id The ID of the authenticated source User that is requesting to block the target User. (required)
     * @param  \OpenAPI\Client\Model\BlockUserRequest $block_user_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersIdBlockRequest($id, $block_user_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersIdBlock'
            );
        }
        // verify the required parameter 'block_user_request' is set
        if ($block_user_request === null || (is_array($block_user_request) && count($block_user_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_user_request when calling usersIdBlock'
            );
        }

        $resourcePath = '/2/users/{id}/blocking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($block_user_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($block_user_request));
            } else {
                $httpBody = $block_user_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersIdBlocking
     *
     * Returns User objects that are blocked by provided User ID
     *
     * @param  string $id The ID of the authenticated source User for whom to return results. (required)
     * @param  int $max_results The maximum number of results. (optional)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get2UsersIdBlockingResponse|\OpenAPI\Client\Model\Error
     */
    public function usersIdBlocking($id, $max_results = null, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        list($response) = $this->usersIdBlockingWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);
        return $response;
    }

    /**
     * Operation usersIdBlockingWithHttpInfo
     *
     * Returns User objects that are blocked by provided User ID
     *
     * @param  string $id The ID of the authenticated source User for whom to return results. (required)
     * @param  int $max_results The maximum number of results. (optional)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get2UsersIdBlockingResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersIdBlockingWithHttpInfo($id, $max_results = null, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $request = $this->usersIdBlockingRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Get2UsersIdBlockingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get2UsersIdBlockingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get2UsersIdBlockingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Get2UsersIdBlockingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get2UsersIdBlockingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersIdBlockingAsync
     *
     * Returns User objects that are blocked by provided User ID
     *
     * @param  string $id The ID of the authenticated source User for whom to return results. (required)
     * @param  int $max_results The maximum number of results. (optional)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdBlockingAsync($id, $max_results = null, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        return $this->usersIdBlockingAsyncWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersIdBlockingAsyncWithHttpInfo
     *
     * Returns User objects that are blocked by provided User ID
     *
     * @param  string $id The ID of the authenticated source User for whom to return results. (required)
     * @param  int $max_results The maximum number of results. (optional)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdBlockingAsyncWithHttpInfo($id, $max_results = null, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $returnType = '\OpenAPI\Client\Model\Get2UsersIdBlockingResponse';
        $request = $this->usersIdBlockingRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersIdBlocking'
     *
     * @param  string $id The ID of the authenticated source User for whom to return results. (required)
     * @param  int $max_results The maximum number of results. (optional)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersIdBlockingRequest($id, $max_results = null, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersIdBlocking'
            );
        }
        if ($max_results !== null && $max_results > 1000) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.usersIdBlocking, must be smaller than or equal to 1000.');
        }
        if ($max_results !== null && $max_results < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.usersIdBlocking, must be bigger than or equal to 1.');
        }

        if ($pagination_token !== null && strlen($pagination_token) < 16) {
            throw new \InvalidArgumentException('invalid length for "$pagination_token" when calling UsersApi.usersIdBlocking, must be bigger than or equal to 16.');
        }

        if ($user_fields !== null && count($user_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$user_fields" when calling UsersApi.usersIdBlocking, number of items must be greater than or equal to 1.');
        }

        if ($expansions !== null && count($expansions) < 1) {
            throw new \InvalidArgumentException('invalid value for "$expansions" when calling UsersApi.usersIdBlocking, number of items must be greater than or equal to 1.');
        }

        if ($tweet_fields !== null && count($tweet_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$tweet_fields" when calling UsersApi.usersIdBlocking, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/2/users/{id}/blocking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_results,
            'max_results', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagination_token,
            'pagination_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_fields,
            'user.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expansions,
            'expansions', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tweet_fields,
            'tweet.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersIdFollow
     *
     * Follow User
     *
     * @param  string $id The ID of the authenticated source User that is requesting to follow the target User. (required)
     * @param  \OpenAPI\Client\Model\UsersFollowingCreateRequest $users_following_create_request users_following_create_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UsersFollowingCreateResponse|\OpenAPI\Client\Model\Error
     */
    public function usersIdFollow($id, $users_following_create_request = null)
    {
        list($response) = $this->usersIdFollowWithHttpInfo($id, $users_following_create_request);
        return $response;
    }

    /**
     * Operation usersIdFollowWithHttpInfo
     *
     * Follow User
     *
     * @param  string $id The ID of the authenticated source User that is requesting to follow the target User. (required)
     * @param  \OpenAPI\Client\Model\UsersFollowingCreateRequest $users_following_create_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UsersFollowingCreateResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersIdFollowWithHttpInfo($id, $users_following_create_request = null)
    {
        $request = $this->usersIdFollowRequest($id, $users_following_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UsersFollowingCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsersFollowingCreateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsersFollowingCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UsersFollowingCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsersFollowingCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersIdFollowAsync
     *
     * Follow User
     *
     * @param  string $id The ID of the authenticated source User that is requesting to follow the target User. (required)
     * @param  \OpenAPI\Client\Model\UsersFollowingCreateRequest $users_following_create_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdFollowAsync($id, $users_following_create_request = null)
    {
        return $this->usersIdFollowAsyncWithHttpInfo($id, $users_following_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersIdFollowAsyncWithHttpInfo
     *
     * Follow User
     *
     * @param  string $id The ID of the authenticated source User that is requesting to follow the target User. (required)
     * @param  \OpenAPI\Client\Model\UsersFollowingCreateRequest $users_following_create_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdFollowAsyncWithHttpInfo($id, $users_following_create_request = null)
    {
        $returnType = '\OpenAPI\Client\Model\UsersFollowingCreateResponse';
        $request = $this->usersIdFollowRequest($id, $users_following_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersIdFollow'
     *
     * @param  string $id The ID of the authenticated source User that is requesting to follow the target User. (required)
     * @param  \OpenAPI\Client\Model\UsersFollowingCreateRequest $users_following_create_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersIdFollowRequest($id, $users_following_create_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersIdFollow'
            );
        }

        $resourcePath = '/2/users/{id}/following';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($users_following_create_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($users_following_create_request));
            } else {
                $httpBody = $users_following_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersIdFollowers
     *
     * Returns User objects that follow a List by the provided User ID
     *
     * @param  string $id The ID of the User to lookup. (required)
     * @param  int $max_results The maximum number of results. (optional)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get2UsersIdFollowersResponse|\OpenAPI\Client\Model\Error
     */
    public function usersIdFollowers($id, $max_results = null, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        list($response) = $this->usersIdFollowersWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);
        return $response;
    }

    /**
     * Operation usersIdFollowersWithHttpInfo
     *
     * Returns User objects that follow a List by the provided User ID
     *
     * @param  string $id The ID of the User to lookup. (required)
     * @param  int $max_results The maximum number of results. (optional)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get2UsersIdFollowersResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersIdFollowersWithHttpInfo($id, $max_results = null, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $request = $this->usersIdFollowersRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Get2UsersIdFollowersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get2UsersIdFollowersResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get2UsersIdFollowersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Get2UsersIdFollowersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get2UsersIdFollowersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersIdFollowersAsync
     *
     * Returns User objects that follow a List by the provided User ID
     *
     * @param  string $id The ID of the User to lookup. (required)
     * @param  int $max_results The maximum number of results. (optional)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdFollowersAsync($id, $max_results = null, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        return $this->usersIdFollowersAsyncWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersIdFollowersAsyncWithHttpInfo
     *
     * Returns User objects that follow a List by the provided User ID
     *
     * @param  string $id The ID of the User to lookup. (required)
     * @param  int $max_results The maximum number of results. (optional)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdFollowersAsyncWithHttpInfo($id, $max_results = null, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $returnType = '\OpenAPI\Client\Model\Get2UsersIdFollowersResponse';
        $request = $this->usersIdFollowersRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersIdFollowers'
     *
     * @param  string $id The ID of the User to lookup. (required)
     * @param  int $max_results The maximum number of results. (optional)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersIdFollowersRequest($id, $max_results = null, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersIdFollowers'
            );
        }
        if (!preg_match("/^[0-9]{1,19}\\z/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling UsersApi.usersIdFollowers, must conform to the pattern /^[0-9]{1,19}\\z/.");
        }

        if ($max_results !== null && $max_results > 1000) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.usersIdFollowers, must be smaller than or equal to 1000.');
        }
        if ($max_results !== null && $max_results < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.usersIdFollowers, must be bigger than or equal to 1.');
        }

        if ($pagination_token !== null && strlen($pagination_token) < 16) {
            throw new \InvalidArgumentException('invalid length for "$pagination_token" when calling UsersApi.usersIdFollowers, must be bigger than or equal to 16.');
        }

        if ($user_fields !== null && count($user_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$user_fields" when calling UsersApi.usersIdFollowers, number of items must be greater than or equal to 1.');
        }

        if ($expansions !== null && count($expansions) < 1) {
            throw new \InvalidArgumentException('invalid value for "$expansions" when calling UsersApi.usersIdFollowers, number of items must be greater than or equal to 1.');
        }

        if ($tweet_fields !== null && count($tweet_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$tweet_fields" when calling UsersApi.usersIdFollowers, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/2/users/{id}/followers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_results,
            'max_results', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagination_token,
            'pagination_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_fields,
            'user.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expansions,
            'expansions', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tweet_fields,
            'tweet.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersIdFollowing
     *
     * Following by User ID
     *
     * @param  string $id The ID of the User to lookup. (required)
     * @param  int $max_results The maximum number of results. (optional)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get2UsersIdFollowingResponse|\OpenAPI\Client\Model\Error
     */
    public function usersIdFollowing($id, $max_results = null, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        list($response) = $this->usersIdFollowingWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);
        return $response;
    }

    /**
     * Operation usersIdFollowingWithHttpInfo
     *
     * Following by User ID
     *
     * @param  string $id The ID of the User to lookup. (required)
     * @param  int $max_results The maximum number of results. (optional)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get2UsersIdFollowingResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersIdFollowingWithHttpInfo($id, $max_results = null, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $request = $this->usersIdFollowingRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Get2UsersIdFollowingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get2UsersIdFollowingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get2UsersIdFollowingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Get2UsersIdFollowingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get2UsersIdFollowingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersIdFollowingAsync
     *
     * Following by User ID
     *
     * @param  string $id The ID of the User to lookup. (required)
     * @param  int $max_results The maximum number of results. (optional)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdFollowingAsync($id, $max_results = null, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        return $this->usersIdFollowingAsyncWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersIdFollowingAsyncWithHttpInfo
     *
     * Following by User ID
     *
     * @param  string $id The ID of the User to lookup. (required)
     * @param  int $max_results The maximum number of results. (optional)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdFollowingAsyncWithHttpInfo($id, $max_results = null, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $returnType = '\OpenAPI\Client\Model\Get2UsersIdFollowingResponse';
        $request = $this->usersIdFollowingRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersIdFollowing'
     *
     * @param  string $id The ID of the User to lookup. (required)
     * @param  int $max_results The maximum number of results. (optional)
     * @param  string $pagination_token This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersIdFollowingRequest($id, $max_results = null, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersIdFollowing'
            );
        }
        if (!preg_match("/^[0-9]{1,19}\\z/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling UsersApi.usersIdFollowing, must conform to the pattern /^[0-9]{1,19}\\z/.");
        }

        if ($max_results !== null && $max_results > 1000) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.usersIdFollowing, must be smaller than or equal to 1000.');
        }
        if ($max_results !== null && $max_results < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.usersIdFollowing, must be bigger than or equal to 1.');
        }

        if ($pagination_token !== null && strlen($pagination_token) < 16) {
            throw new \InvalidArgumentException('invalid length for "$pagination_token" when calling UsersApi.usersIdFollowing, must be bigger than or equal to 16.');
        }

        if ($user_fields !== null && count($user_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$user_fields" when calling UsersApi.usersIdFollowing, number of items must be greater than or equal to 1.');
        }

        if ($expansions !== null && count($expansions) < 1) {
            throw new \InvalidArgumentException('invalid value for "$expansions" when calling UsersApi.usersIdFollowing, number of items must be greater than or equal to 1.');
        }

        if ($tweet_fields !== null && count($tweet_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$tweet_fields" when calling UsersApi.usersIdFollowing, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/2/users/{id}/following';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_results,
            'max_results', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagination_token,
            'pagination_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_fields,
            'user.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expansions,
            'expansions', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tweet_fields,
            'tweet.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersIdMute
     *
     * Mute User by User ID.
     *
     * @param  string $id The ID of the authenticated source User that is requesting to mute the target User. (required)
     * @param  \OpenAPI\Client\Model\MuteUserRequest $mute_user_request mute_user_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MuteUserMutationResponse|\OpenAPI\Client\Model\Error
     */
    public function usersIdMute($id, $mute_user_request = null)
    {
        list($response) = $this->usersIdMuteWithHttpInfo($id, $mute_user_request);
        return $response;
    }

    /**
     * Operation usersIdMuteWithHttpInfo
     *
     * Mute User by User ID.
     *
     * @param  string $id The ID of the authenticated source User that is requesting to mute the target User. (required)
     * @param  \OpenAPI\Client\Model\MuteUserRequest $mute_user_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MuteUserMutationResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersIdMuteWithHttpInfo($id, $mute_user_request = null)
    {
        $request = $this->usersIdMuteRequest($id, $mute_user_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MuteUserMutationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MuteUserMutationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MuteUserMutationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MuteUserMutationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MuteUserMutationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersIdMuteAsync
     *
     * Mute User by User ID.
     *
     * @param  string $id The ID of the authenticated source User that is requesting to mute the target User. (required)
     * @param  \OpenAPI\Client\Model\MuteUserRequest $mute_user_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdMuteAsync($id, $mute_user_request = null)
    {
        return $this->usersIdMuteAsyncWithHttpInfo($id, $mute_user_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersIdMuteAsyncWithHttpInfo
     *
     * Mute User by User ID.
     *
     * @param  string $id The ID of the authenticated source User that is requesting to mute the target User. (required)
     * @param  \OpenAPI\Client\Model\MuteUserRequest $mute_user_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdMuteAsyncWithHttpInfo($id, $mute_user_request = null)
    {
        $returnType = '\OpenAPI\Client\Model\MuteUserMutationResponse';
        $request = $this->usersIdMuteRequest($id, $mute_user_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersIdMute'
     *
     * @param  string $id The ID of the authenticated source User that is requesting to mute the target User. (required)
     * @param  \OpenAPI\Client\Model\MuteUserRequest $mute_user_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersIdMuteRequest($id, $mute_user_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersIdMute'
            );
        }

        $resourcePath = '/2/users/{id}/muting';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($mute_user_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($mute_user_request));
            } else {
                $httpBody = $mute_user_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersIdMuting
     *
     * Returns User objects that are muted by the provided User ID
     *
     * @param  string $id The ID of the authenticated source User for whom to return results. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get2UsersIdMutingResponse|\OpenAPI\Client\Model\Error
     */
    public function usersIdMuting($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        list($response) = $this->usersIdMutingWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);
        return $response;
    }

    /**
     * Operation usersIdMutingWithHttpInfo
     *
     * Returns User objects that are muted by the provided User ID
     *
     * @param  string $id The ID of the authenticated source User for whom to return results. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get2UsersIdMutingResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersIdMutingWithHttpInfo($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $request = $this->usersIdMutingRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Get2UsersIdMutingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get2UsersIdMutingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get2UsersIdMutingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Get2UsersIdMutingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get2UsersIdMutingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersIdMutingAsync
     *
     * Returns User objects that are muted by the provided User ID
     *
     * @param  string $id The ID of the authenticated source User for whom to return results. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdMutingAsync($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        return $this->usersIdMutingAsyncWithHttpInfo($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersIdMutingAsyncWithHttpInfo
     *
     * Returns User objects that are muted by the provided User ID
     *
     * @param  string $id The ID of the authenticated source User for whom to return results. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdMutingAsyncWithHttpInfo($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $returnType = '\OpenAPI\Client\Model\Get2UsersIdMutingResponse';
        $request = $this->usersIdMutingRequest($id, $max_results, $pagination_token, $user_fields, $expansions, $tweet_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersIdMuting'
     *
     * @param  string $id The ID of the authenticated source User for whom to return results. (required)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string $pagination_token This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersIdMutingRequest($id, $max_results = 100, $pagination_token = null, $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersIdMuting'
            );
        }
        if ($max_results !== null && $max_results > 1000) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.usersIdMuting, must be smaller than or equal to 1000.');
        }
        if ($max_results !== null && $max_results < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling UsersApi.usersIdMuting, must be bigger than or equal to 1.');
        }

        if ($pagination_token !== null && strlen($pagination_token) > 19) {
            throw new \InvalidArgumentException('invalid length for "$pagination_token" when calling UsersApi.usersIdMuting, must be smaller than or equal to 19.');
        }
        if ($pagination_token !== null && strlen($pagination_token) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pagination_token" when calling UsersApi.usersIdMuting, must be bigger than or equal to 1.');
        }

        if ($user_fields !== null && count($user_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$user_fields" when calling UsersApi.usersIdMuting, number of items must be greater than or equal to 1.');
        }

        if ($expansions !== null && count($expansions) < 1) {
            throw new \InvalidArgumentException('invalid value for "$expansions" when calling UsersApi.usersIdMuting, number of items must be greater than or equal to 1.');
        }

        if ($tweet_fields !== null && count($tweet_fields) < 1) {
            throw new \InvalidArgumentException('invalid value for "$tweet_fields" when calling UsersApi.usersIdMuting, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/2/users/{id}/muting';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_results,
            'max_results', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagination_token,
            'pagination_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_fields,
            'user.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expansions,
            'expansions', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tweet_fields,
            'tweet.fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersIdUnblock
     *
     * Unblock User by User ID
     *
     * @param  string $source_user_id The ID of the authenticated source User that is requesting to unblock the target User. (required)
     * @param  string $target_user_id The ID of the User that the source User is requesting to unblock. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BlockUserMutationResponse|\OpenAPI\Client\Model\Error
     */
    public function usersIdUnblock($source_user_id, $target_user_id)
    {
        list($response) = $this->usersIdUnblockWithHttpInfo($source_user_id, $target_user_id);
        return $response;
    }

    /**
     * Operation usersIdUnblockWithHttpInfo
     *
     * Unblock User by User ID
     *
     * @param  string $source_user_id The ID of the authenticated source User that is requesting to unblock the target User. (required)
     * @param  string $target_user_id The ID of the User that the source User is requesting to unblock. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BlockUserMutationResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersIdUnblockWithHttpInfo($source_user_id, $target_user_id)
    {
        $request = $this->usersIdUnblockRequest($source_user_id, $target_user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BlockUserMutationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BlockUserMutationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BlockUserMutationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BlockUserMutationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BlockUserMutationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersIdUnblockAsync
     *
     * Unblock User by User ID
     *
     * @param  string $source_user_id The ID of the authenticated source User that is requesting to unblock the target User. (required)
     * @param  string $target_user_id The ID of the User that the source User is requesting to unblock. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdUnblockAsync($source_user_id, $target_user_id)
    {
        return $this->usersIdUnblockAsyncWithHttpInfo($source_user_id, $target_user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersIdUnblockAsyncWithHttpInfo
     *
     * Unblock User by User ID
     *
     * @param  string $source_user_id The ID of the authenticated source User that is requesting to unblock the target User. (required)
     * @param  string $target_user_id The ID of the User that the source User is requesting to unblock. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdUnblockAsyncWithHttpInfo($source_user_id, $target_user_id)
    {
        $returnType = '\OpenAPI\Client\Model\BlockUserMutationResponse';
        $request = $this->usersIdUnblockRequest($source_user_id, $target_user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersIdUnblock'
     *
     * @param  string $source_user_id The ID of the authenticated source User that is requesting to unblock the target User. (required)
     * @param  string $target_user_id The ID of the User that the source User is requesting to unblock. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersIdUnblockRequest($source_user_id, $target_user_id)
    {
        // verify the required parameter 'source_user_id' is set
        if ($source_user_id === null || (is_array($source_user_id) && count($source_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_user_id when calling usersIdUnblock'
            );
        }
        // verify the required parameter 'target_user_id' is set
        if ($target_user_id === null || (is_array($target_user_id) && count($target_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_user_id when calling usersIdUnblock'
            );
        }
        if (!preg_match("/^[0-9]{1,19}\\z/", $target_user_id)) {
            throw new \InvalidArgumentException("invalid value for \"target_user_id\" when calling UsersApi.usersIdUnblock, must conform to the pattern /^[0-9]{1,19}\\z/.");
        }


        $resourcePath = '/2/users/{source_user_id}/blocking/{target_user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($source_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'source_user_id' . '}',
                ObjectSerializer::toPathValue($source_user_id),
                $resourcePath
            );
        }
        // path params
        if ($target_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'target_user_id' . '}',
                ObjectSerializer::toPathValue($target_user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersIdUnfollow
     *
     * Unfollow User
     *
     * @param  string $source_user_id The ID of the authenticated source User that is requesting to unfollow the target User. (required)
     * @param  string $target_user_id The ID of the User that the source User is requesting to unfollow. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UsersFollowingDeleteResponse|\OpenAPI\Client\Model\Error
     */
    public function usersIdUnfollow($source_user_id, $target_user_id)
    {
        list($response) = $this->usersIdUnfollowWithHttpInfo($source_user_id, $target_user_id);
        return $response;
    }

    /**
     * Operation usersIdUnfollowWithHttpInfo
     *
     * Unfollow User
     *
     * @param  string $source_user_id The ID of the authenticated source User that is requesting to unfollow the target User. (required)
     * @param  string $target_user_id The ID of the User that the source User is requesting to unfollow. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UsersFollowingDeleteResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersIdUnfollowWithHttpInfo($source_user_id, $target_user_id)
    {
        $request = $this->usersIdUnfollowRequest($source_user_id, $target_user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UsersFollowingDeleteResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsersFollowingDeleteResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsersFollowingDeleteResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UsersFollowingDeleteResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsersFollowingDeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersIdUnfollowAsync
     *
     * Unfollow User
     *
     * @param  string $source_user_id The ID of the authenticated source User that is requesting to unfollow the target User. (required)
     * @param  string $target_user_id The ID of the User that the source User is requesting to unfollow. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdUnfollowAsync($source_user_id, $target_user_id)
    {
        return $this->usersIdUnfollowAsyncWithHttpInfo($source_user_id, $target_user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersIdUnfollowAsyncWithHttpInfo
     *
     * Unfollow User
     *
     * @param  string $source_user_id The ID of the authenticated source User that is requesting to unfollow the target User. (required)
     * @param  string $target_user_id The ID of the User that the source User is requesting to unfollow. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdUnfollowAsyncWithHttpInfo($source_user_id, $target_user_id)
    {
        $returnType = '\OpenAPI\Client\Model\UsersFollowingDeleteResponse';
        $request = $this->usersIdUnfollowRequest($source_user_id, $target_user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersIdUnfollow'
     *
     * @param  string $source_user_id The ID of the authenticated source User that is requesting to unfollow the target User. (required)
     * @param  string $target_user_id The ID of the User that the source User is requesting to unfollow. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersIdUnfollowRequest($source_user_id, $target_user_id)
    {
        // verify the required parameter 'source_user_id' is set
        if ($source_user_id === null || (is_array($source_user_id) && count($source_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_user_id when calling usersIdUnfollow'
            );
        }
        // verify the required parameter 'target_user_id' is set
        if ($target_user_id === null || (is_array($target_user_id) && count($target_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_user_id when calling usersIdUnfollow'
            );
        }
        if (!preg_match("/^[0-9]{1,19}\\z/", $target_user_id)) {
            throw new \InvalidArgumentException("invalid value for \"target_user_id\" when calling UsersApi.usersIdUnfollow, must conform to the pattern /^[0-9]{1,19}\\z/.");
        }


        $resourcePath = '/2/users/{source_user_id}/following/{target_user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($source_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'source_user_id' . '}',
                ObjectSerializer::toPathValue($source_user_id),
                $resourcePath
            );
        }
        // path params
        if ($target_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'target_user_id' . '}',
                ObjectSerializer::toPathValue($target_user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersIdUnmute
     *
     * Unmute User by User ID
     *
     * @param  string $source_user_id The ID of the authenticated source User that is requesting to unmute the target User. (required)
     * @param  string $target_user_id The ID of the User that the source User is requesting to unmute. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MuteUserMutationResponse|\OpenAPI\Client\Model\Error
     */
    public function usersIdUnmute($source_user_id, $target_user_id)
    {
        list($response) = $this->usersIdUnmuteWithHttpInfo($source_user_id, $target_user_id);
        return $response;
    }

    /**
     * Operation usersIdUnmuteWithHttpInfo
     *
     * Unmute User by User ID
     *
     * @param  string $source_user_id The ID of the authenticated source User that is requesting to unmute the target User. (required)
     * @param  string $target_user_id The ID of the User that the source User is requesting to unmute. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MuteUserMutationResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersIdUnmuteWithHttpInfo($source_user_id, $target_user_id)
    {
        $request = $this->usersIdUnmuteRequest($source_user_id, $target_user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MuteUserMutationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MuteUserMutationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MuteUserMutationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MuteUserMutationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MuteUserMutationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersIdUnmuteAsync
     *
     * Unmute User by User ID
     *
     * @param  string $source_user_id The ID of the authenticated source User that is requesting to unmute the target User. (required)
     * @param  string $target_user_id The ID of the User that the source User is requesting to unmute. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdUnmuteAsync($source_user_id, $target_user_id)
    {
        return $this->usersIdUnmuteAsyncWithHttpInfo($source_user_id, $target_user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersIdUnmuteAsyncWithHttpInfo
     *
     * Unmute User by User ID
     *
     * @param  string $source_user_id The ID of the authenticated source User that is requesting to unmute the target User. (required)
     * @param  string $target_user_id The ID of the User that the source User is requesting to unmute. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersIdUnmuteAsyncWithHttpInfo($source_user_id, $target_user_id)
    {
        $returnType = '\OpenAPI\Client\Model\MuteUserMutationResponse';
        $request = $this->usersIdUnmuteRequest($source_user_id, $target_user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersIdUnmute'
     *
     * @param  string $source_user_id The ID of the authenticated source User that is requesting to unmute the target User. (required)
     * @param  string $target_user_id The ID of the User that the source User is requesting to unmute. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersIdUnmuteRequest($source_user_id, $target_user_id)
    {
        // verify the required parameter 'source_user_id' is set
        if ($source_user_id === null || (is_array($source_user_id) && count($source_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_user_id when calling usersIdUnmute'
            );
        }
        // verify the required parameter 'target_user_id' is set
        if ($target_user_id === null || (is_array($target_user_id) && count($target_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_user_id when calling usersIdUnmute'
            );
        }
        if (!preg_match("/^[0-9]{1,19}\\z/", $target_user_id)) {
            throw new \InvalidArgumentException("invalid value for \"target_user_id\" when calling UsersApi.usersIdUnmute, must conform to the pattern /^[0-9]{1,19}\\z/.");
        }


        $resourcePath = '/2/users/{source_user_id}/muting/{target_user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($source_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'source_user_id' . '}',
                ObjectSerializer::toPathValue($source_user_id),
                $resourcePath
            );
        }
        // path params
        if ($target_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'target_user_id' . '}',
                ObjectSerializer::toPathValue($target_user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
